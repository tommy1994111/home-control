{"version":3,"sources":["pages/Index/index.tsx","pages/WaterPressure/index.tsx","App.tsx","serviceWorker.js","index.tsx","pages/WaterPressure/style.module.sass"],"names":["Index","DataInterval","react_default","a","createElement","Typography","paragraph","routes","name","path","exact","component","state","chart","loading","lastUpdated","dataInterval","last10Data","pressureData","datetimes","map","data","time","unshift","pressureValues","pressure_value","apiLink","concat","this","fetch","response","json","columns","x","xFormat","axis","type","localtime","tick","format","grid","show","y","legend","setState","getPressureData","mapDataToColumns","c3","c3Config","Date","toLocaleString","timeZone","renderChart","_this2","Card","CardContent","id","Button","className","classes","button","variant","color","onClick","last12Hours","last24Hours","Component","useStyles","makeStyles","theme","root","display","menuButton","marginRight","spacing","drawer","width","flexShrink","drawerPaper","drawerHeader","Object","objectSpread","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","transition","transitions","create","easing","sharp","duration","leavingScreen","contentShift","easeOut","enteringScreen","marginLeft","RouteLink","React","forwardRef","props","ref","react_router_dom","assign","to","AppBarTitle","react_router","noWrap","App","useTheme","_React$useState","useState","_React$useState2","slicedToArray","open","setOpen","handleDrawerOpen","handleDrawerClose","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","Menu_default","routeProps","index","App_AppBarTitle","key","SwipeableDrawer","onClose","onOpen","paper","direction","ChevronLeft_default","ChevronRight_default","Divider","List","_ref","ListItem","ListItemIcon","MoveToInbox_default","ListItemText","primary","renderRoutes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.64fe49bd.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Index () {\n    return (\n        <Typography paragraph>\n          首頁\n        </Typography>\n    )\n}\n\nexport default Index;","import React, { Component } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport * as c3 from \"c3\";\nimport \"c3/c3.min.css\";\nimport classes from \"./style.module.sass\";\n\nconst SERVER_IP = \"192.168.88.100:8000\";\n\nenum DataInterval { // 資料區間\n  last10Data, // 最新10筆\n  last12Hours, // 最新12小時\n  last24Hours, // 最新24小時\n  today // 今日\n}\n\ninterface States {\n  chart: c3.ChartAPI | null; // c3 chart reference\n  loading: boolean; // 讀取中\n  lastUpdated: string; // 最後更新時間\n  dataInterval: DataInterval; // 資料區間\n}\n\ninterface Props {}\n\ninterface WaterPressureData {// 水壓資料\n  time: string; // 時間\n  pressure_value: number; // 水壓值\n}\n\ntype C3Column = Array<string | number>;\n\nclass WaterPressure extends Component<Props, States> {\n  state: States = {\n    chart: null,\n    loading: true,\n    lastUpdated: \"\",\n    dataInterval: DataInterval.last10Data\n  };\n\n  private mapDataToColumns(pressureData: WaterPressureData[]) {\n    const datetimes: C3Column = pressureData.map(\n      (data: WaterPressureData) => data.time\n    );\n    datetimes.unshift(\"時間\");\n    const pressureValues: C3Column = pressureData.map(\n      (data: WaterPressureData) => data.pressure_value\n    );\n    pressureValues.unshift(\"水壓\");\n    return [datetimes, pressureValues];\n  }\n\n  private async getPressureData() {\n    const apiLink =\n      process.env.NODE_ENV === \"development\"\n        ? `http://${SERVER_IP}/api/getData?type=${this.state.dataInterval}`\n        : `/api/getData?type=${this.state.dataInterval}`;\n    const response = await fetch(apiLink);\n    const pressureData = await response.json();\n    return pressureData;\n  }\n\n  private c3Config(columns: Array<C3Column>) {\n    // 產生 c3.generate 所需 options\n    // TODO: grid bug (x grid render wrong position)\n    return {\n      data: {\n        x: \"時間\",\n        xFormat: \"%Y-%m-%d %H:%M:%S\",\n        columns: columns\n      },\n      axis: {\n        x: {\n          type: \"timeseries\",\n          localtime: true,\n          tick: {\n            format: \"%H:%M\"\n          }\n        }\n      },\n      grid: {\n        x: {\n          show: false\n        },\n        y: {\n          show: false\n        }\n      },\n      legend: {\n        show: false\n      }\n    };\n  }\n\n  async renderChart(dataInterval: DataInterval) {\n    await this.setState({ loading: true, dataInterval });\n    const pressureData: WaterPressureData[] = await this.getPressureData();\n    const columns: C3Column[] = this.mapDataToColumns(pressureData);\n    const chart: c3.ChartAPI = c3.generate(this.c3Config(columns));\n    const lastUpdated = new Date().toLocaleString(\"zh-Hant\", {\n      timeZone: \"Asia/Taipei\"\n    });\n\n    this.setState({ chart, loading: false, lastUpdated });\n  }\n\n  componentDidMount() {\n    this.renderChart(this.state.dataInterval);\n  }\n\n  render() {\n    return (\n      <Card>\n        <CardContent>\n          <div id=\"chart\" />\n          <Button\n            className={classes.button}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => this.renderChart(this.state.dataInterval)}\n          >\n            更新\n          </Button>\n          <Button\n            className={classes.button}\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => this.renderChart(DataInterval.last10Data)}\n          >\n            最新10筆\n          </Button>\n          <Button\n            className={classes.button}\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => this.renderChart(DataInterval.last12Hours)}\n          >\n            最新12小時\n          </Button>\n          <Button\n            className={classes.button}\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => this.renderChart(DataInterval.last24Hours)}\n          >\n            最新24小時\n          </Button>\n          <Typography variant=\"h6\">\n            最後更新時間: {this.state.lastUpdated}\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default WaterPressure;\n","import React from \"react\";\n// import clsx from \"clsx\";\nimport \"typeface-roboto\";\nimport { makeStyles, useTheme, Theme } from \"@material-ui/core/styles\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport { MemoryRouter as Router, Link, Route, LinkProps, Switch } from \"react-router-dom\";\nimport { renderRoutes } from \"react-router-config\";\nimport Index from './pages/Index/index';\nimport WaterPressure from \"./pages/WaterPressure/index\";\n\ntype RouteProps = {\n  name: string\n  path: string\n  exact?: boolean\n  component: any\n}\n\nconst routes: RouteProps[] = [\n  {\n    name: \"首頁\",\n    path: \"/\",\n    exact: true,\n    component: Index\n  },\n  {\n    name: \"水壓偵測\",\n    path: \"/water_pressure\",\n    component: WaterPressure\n  }\n];\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: \"flex\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n}));\n\n// const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\nconst RouteLink = (path: string) => React.forwardRef<HTMLAnchorElement, Partial<LinkProps>>(\n  (props, ref) => <Link {...props} to={path} ref={ref as any} />\n);\n\nconst AppBarTitle = (props: RouteProps) => {\n  const { name, path, exact } = props\n  return (\n    <Route\n      path={path}\n      exact={exact}\n      component={() => <Typography variant=\"h6\" noWrap>{name}</Typography>}\n    />\n  )\n}\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  function handleDrawerOpen() {\n    setOpen(true);\n  }\n\n  function handleDrawerClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Router>\n        <AppBar position=\"fixed\">\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"Open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={classes.menuButton}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Switch>\n              {routes.map((routeProps: RouteProps, index) => <AppBarTitle key={index} {...routeProps} />)}\n            </Switch>\n          </Toolbar>\n        </AppBar>\n        <SwipeableDrawer\n          className={classes.drawer}\n          open={open}\n          onClose={handleDrawerClose}\n          onOpen={handleDrawerOpen}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n          // disableBackdropTransition={!iOS}\n          // disableDiscovery={iOS}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === \"ltr\" ? (\n                <ChevronLeftIcon />\n              ) : (\n                <ChevronRightIcon />\n              )}\n            </IconButton>\n          </div>\n          <Divider />\n\n          <List>\n            {routes.map(({ name, path }) => (\n              <ListItem\n                button\n                key={name}\n                component={RouteLink(path)}\n                onClick={handleDrawerClose}\n              >\n                <ListItemIcon>\n                  <InboxIcon />\n                </ListItemIcon>\n                <ListItemText primary={name} />\n              </ListItem>\n            ))}\n          </List>\n        </SwipeableDrawer>\n        <main className={classes.content}>\n          <div className={classes.drawerHeader} />\n          <Switch>\n            {renderRoutes(routes)}\n          </Switch>\n        </main>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"style_button__3K0LH\"};"],"sourceRoot":""}